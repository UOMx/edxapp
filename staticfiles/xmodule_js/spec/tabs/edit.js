// Generated by CoffeeScript 1.6.1
(function() {

  describe("TabsEditingDescriptor", function() {
    beforeEach(function() {
      this.isInactiveClass = "is-inactive";
      this.isCurrent = "current";
      loadFixtures('tabs-edit.html');
      this.descriptor = new TabsEditingDescriptor($('.xblock'));
      this.html_id = 'test_id';
      this.tab_0_switch = jasmine.createSpy('tab_0_switch');
      this.tab_0_modelUpdate = jasmine.createSpy('tab_0_modelUpdate');
      this.tab_1_switch = jasmine.createSpy('tab_1_switch');
      this.tab_1_modelUpdate = jasmine.createSpy('tab_1_modelUpdate');
      TabsEditingDescriptor.Model.addModelUpdate(this.html_id, 'Tab 0 Editor', this.tab_0_modelUpdate);
      TabsEditingDescriptor.Model.addOnSwitch(this.html_id, 'Tab 0 Editor', this.tab_0_switch);
      TabsEditingDescriptor.Model.addModelUpdate(this.html_id, 'Tab 1 Transcripts', this.tab_1_modelUpdate);
      TabsEditingDescriptor.Model.addOnSwitch(this.html_id, 'Tab 1 Transcripts', this.tab_1_switch);
      spyOn($.fn, 'hide').andCallThrough();
      spyOn($.fn, 'show').andCallThrough();
      spyOn(TabsEditingDescriptor.Model, 'initialize');
      return spyOn(TabsEditingDescriptor.Model, 'updateValue');
    });
    afterEach(function() {
      return TabsEditingDescriptor.Model.modules = {};
    });
    describe("constructor", function() {
      return it("first tab should be visible", function() {
        expect(this.descriptor.$tabs.first()).toHaveClass(this.isCurrent);
        return expect(this.descriptor.$content.first()).not.toHaveClass(this.isInactiveClass);
      });
    });
    describe("onSwitchEditor", function() {
      it("switching tabs changes styles", function() {
        this.descriptor.$tabs.eq(1).trigger("click");
        expect(this.descriptor.$tabs.eq(0)).not.toHaveClass(this.isCurrent);
        expect(this.descriptor.$content.eq(0)).toHaveClass(this.isInactiveClass);
        expect(this.descriptor.$tabs.eq(1)).toHaveClass(this.isCurrent);
        expect(this.descriptor.$content.eq(1)).not.toHaveClass(this.isInactiveClass);
        return expect(this.tab_1_switch).toHaveBeenCalled();
      });
      it("if click on current tab, nothing should happen", function() {
        var currentTab;
        spyOn($.fn, 'trigger').andCallThrough();
        currentTab = this.descriptor.$tabs.filter('.' + this.isCurrent);
        this.descriptor.$tabs.eq(0).trigger("click");
        expect(this.descriptor.$tabs.filter('.' + this.isCurrent)).toEqual(currentTab);
        return expect($.fn.trigger.calls.length).toEqual(1);
      });
      return it("onSwitch function call", function() {
        this.descriptor.$tabs.eq(1).trigger("click");
        expect(TabsEditingDescriptor.Model.updateValue).toHaveBeenCalled();
        return expect(this.tab_1_switch).toHaveBeenCalled();
      });
    });
    return describe("save", function() {
      it("function for current tab should be called", function() {
        var data;
        this.descriptor.$tabs.eq(1).trigger("click");
        data = this.descriptor.save().data;
        return expect(this.tab_1_modelUpdate).toHaveBeenCalled();
      });
      return it("detach click event", function() {
        spyOn($.fn, "off");
        this.descriptor.save();
        return expect($.fn.off).toHaveBeenCalledWith('click', '.editor-tabs .tab', this.descriptor.onSwitchEditor);
      });
    });
  });

  describe("TabsEditingDescriptor special save cases", function() {
    beforeEach(function() {
      this.isInactiveClass = "is-inactive";
      this.isCurrent = "current";
      loadFixtures('tabs-edit.html');
      this.descriptor = new window.TabsEditingDescriptor($('.xblock'));
      return this.html_id = 'test_id';
    });
    return describe("save", function() {
      it("case: no init", function() {
        var data;
        data = this.descriptor.save().data;
        return expect(data).toEqual(null);
      });
      it("case: no function in model update", function() {
        var data;
        TabsEditingDescriptor.Model.initialize(this.html_id);
        data = this.descriptor.save().data;
        return expect(data).toEqual(null);
      });
      return it("case: no function in model update, but value presented", function() {
        var data;
        this.tab_0_modelUpdate = jasmine.createSpy('tab_0_modelUpdate').andReturn(1);
        TabsEditingDescriptor.Model.addModelUpdate(this.html_id, 'Tab 0 Editor', this.tab_0_modelUpdate);
        this.descriptor.$tabs.eq(1).trigger("click");
        expect(this.tab_0_modelUpdate).toHaveBeenCalled();
        data = this.descriptor.save().data;
        return expect(data).toEqual(1);
      });
    });
  });

}).call(this);
