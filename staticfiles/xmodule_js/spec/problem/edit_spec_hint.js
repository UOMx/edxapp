// Generated by CoffeeScript 1.6.1
(function() {

  describe('Markdown to xml extended hint dropdown', function() {
    it('produces xml', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml("Translation between Dropdown and ________ is straightforward.\n\n[[\n   (Multiple Choice) 	 {{ Good Job::Yes, multiple choice is the right answer. }}\n   Text Input	                  {{ No, text input problems don't present options. }}\n   Numerical Input	 {{ No, numerical input problems don't present options. }}\n]]\n\n\n\nClowns have funny _________ to make people laugh.\n\n[[\n  dogs		{{ NOPE::Not dogs, not cats, not toads }}\n  (FACES)	{{ With lots of makeup, doncha know?}}\n      \n  money       {{ Clowns don't have any money, of course }}\n  donkeys     {{don't be an ass.}}\n  -no hint-\n]]\n");
      return expect(data).toEqual("<problem>\n<p>Translation between Dropdown and ________ is straightforward.</p>\n<optionresponse>\n  <optioninput>\n    <option correct=\"True\">Multiple Choice <optionhint label=\"Good Job\">Yes, multiple choice is the right answer.</optionhint></option>\n    <option correct=\"False\">Text Input <optionhint>No, text input problems don't present options.</optionhint></option>\n    <option correct=\"False\">Numerical Input <optionhint>No, numerical input problems don't present options.</optionhint></option>\n  </optioninput>\n</optionresponse>\n\n<p>Clowns have funny _________ to make people laugh.</p>\n<optionresponse>\n  <optioninput>\n    <option correct=\"False\">dogs <optionhint label=\"NOPE\">Not dogs, not cats, not toads</optionhint></option>\n    <option correct=\"True\">FACES <optionhint>With lots of makeup, doncha know?</optionhint></option>\n    <option correct=\"False\">money <optionhint>Clowns don't have any money, of course</optionhint></option>\n    <option correct=\"False\">donkeys <optionhint>don't be an ass.</optionhint></option>\n    <option correct=\"False\">-no hint-</option>\n  </optioninput>\n</optionresponse>\n\n</problem>");
    });
    it('produces xml with demand hint', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml("Translation between Dropdown and ________ is straightforward.\n\n[[\n   (Right) 	 {{ Good Job::yes }}\n   Wrong 1	                  {{no}}\n   Wrong 2	 {{ Label::no }}\n]]\n\n|| 0) zero ||\n|| 1) one ||\n|| 2) two ||");
      return expect(data).toEqual("<problem>\n<p>Translation between Dropdown and ________ is straightforward.</p>\n<optionresponse>\n  <optioninput>\n    <option correct=\"True\">Right <optionhint label=\"Good Job\">yes</optionhint></option>\n    <option correct=\"False\">Wrong 1 <optionhint>no</optionhint></option>\n    <option correct=\"False\">Wrong 2 <optionhint label=\"Label\">no</optionhint></option>\n  </optioninput>\n</optionresponse>\n\n<demandhint>\n  <hint>0) zero</hint>\n  <hint>1) one</hint>\n  <hint>2) two</hint>\n</demandhint>\n</problem>");
    });
    it('produces xml with single-line markdown syntax', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml("A Question ________ is answered.\n\n[[(Right), Wrong 1, Wrong 2]]\n|| 0) zero ||\n|| 1) one ||");
      return expect(data).toEqual("<problem>\n<p>A Question ________ is answered.</p>\n<optionresponse>\n  <optioninput options=\"('Right','Wrong 1','Wrong 2')\" correct=\"Right\"></optioninput>\n</optionresponse>\n\n<demandhint>\n  <hint>0) zero</hint>\n  <hint>1) one</hint>\n</demandhint>\n</problem>");
    });
    it('produces xml with fewer newlines', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q1<<\n[[ (aa) 	 {{ hint1 }}\n   bb\n   cc	 {{ hint2 }} ]]");
      return expect(data).toEqual("<problem>\n<p>q1</p>\n\n<optionresponse>\n  <optioninput label=\"q1\">\n    <option correct=\"True\">aa <optionhint>hint1</optionhint></option>\n    <option correct=\"False\">bb</option>\n    <option correct=\"False\">cc <optionhint>hint2</optionhint></option>\n  </optioninput>\n</optionresponse>\n\n\n</problem>");
    });
    return it('produces xml even with lots of whitespace', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q1<<\n[[\n\n      \n    aa   {{ hint1 }}\n  \n        bb   {{ hint2 }}\n (cc)\n   \n        ]]");
      return expect(data).toEqual("<problem>\n<p>q1</p>\n\n<optionresponse>\n  <optioninput label=\"q1\">\n    <option correct=\"False\">aa <optionhint>hint1</optionhint></option>\n    <option correct=\"False\">bb <optionhint>hint2</optionhint></option>\n    <option correct=\"True\">cc</option>\n  </optioninput>\n</optionresponse>\n\n\n</problem>");
    });
  });

  describe('Markdown to xml extended hint checkbox', function() {
    it('produces xml', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Select all the fruits from the list<<\n      \n[x] Apple     	 	 {{ selected: You're right that apple is a fruit. }, {unselected: Remember that apple is also a fruit.}}\n[ ] Mushroom	   	 {{U: You're right that mushrooms aren't fruit}, { selected: Mushroom is a fungus, not a fruit.}}\n[x] Grape		     {{ selected: You're right that grape is a fruit }, {unselected: Remember that grape is also a fruit.}}\n[ ] Mustang\n[ ] Camero            {{S:I don't know what a Camero is but it isn't a fruit.},{U:What is a camero anyway?}}\n\n          \n{{ ((A*B)) You're right that apple is a fruit, but there's one you're missing. Also, mushroom is not a fruit.}}\n{{ ((B*C)) You're right that grape is a fruit, but there's one you're missing. Also, mushroom is not a fruit.    }}\n\n\n>>Select all the vegetables from the list<<\n       \n[ ] Banana     	 	 {{ selected: No, sorry, a banana is a fruit. }, {unselected: poor banana.}}\n[ ] Ice Cream\n[ ] Mushroom	   	 {{U: You're right that mushrooms aren't vegetables.}, { selected: Mushroom is a fungus, not a vegetable.}}\n[x] Brussel Sprout	 {{S: Brussel sprouts are vegetables.}, {u: Brussel sprout is the only vegetable in this list.}}\n\n\n{{ ((A*B)) Making a banana split? }}\n{{ ((B*D)) That will make a horrible dessert: a brussel sprout split? }}");
      return expect(data).toEqual("<problem>\n<p>Select all the fruits from the list</p>\n<choiceresponse>\n  <checkboxgroup label=\"Select all the fruits from the list\">\n    <choice correct=\"true\">Apple\n      <choicehint selected=\"true\">You're right that apple is a fruit.</choicehint>\n      <choicehint selected=\"false\">Remember that apple is also a fruit.</choicehint></choice>\n    <choice correct=\"false\">Mushroom\n      <choicehint selected=\"true\">Mushroom is a fungus, not a fruit.</choicehint>\n      <choicehint selected=\"false\">You're right that mushrooms aren't fruit</choicehint></choice>\n    <choice correct=\"true\">Grape\n      <choicehint selected=\"true\">You're right that grape is a fruit</choicehint>\n      <choicehint selected=\"false\">Remember that grape is also a fruit.</choicehint></choice>\n    <choice correct=\"false\">Mustang</choice>\n    <choice correct=\"false\">Camero\n      <choicehint selected=\"true\">I don't know what a Camero is but it isn't a fruit.</choicehint>\n      <choicehint selected=\"false\">What is a camero anyway?</choicehint></choice>\n    <compoundhint value=\"A*B\">You're right that apple is a fruit, but there's one you're missing. Also, mushroom is not a fruit.</compoundhint>\n    <compoundhint value=\"B*C\">You're right that grape is a fruit, but there's one you're missing. Also, mushroom is not a fruit.</compoundhint>\n  </checkboxgroup>\n</choiceresponse>\n\n<p>Select all the vegetables from the list</p>\n<choiceresponse>\n  <checkboxgroup label=\"Select all the vegetables from the list\">\n    <choice correct=\"false\">Banana\n      <choicehint selected=\"true\">No, sorry, a banana is a fruit.</choicehint>\n      <choicehint selected=\"false\">poor banana.</choicehint></choice>\n    <choice correct=\"false\">Ice Cream</choice>\n    <choice correct=\"false\">Mushroom\n      <choicehint selected=\"true\">Mushroom is a fungus, not a vegetable.</choicehint>\n      <choicehint selected=\"false\">You're right that mushrooms aren't vegetables.</choicehint></choice>\n    <choice correct=\"true\">Brussel Sprout\n      <choicehint selected=\"true\">Brussel sprouts are vegetables.</choicehint>\n      <choicehint selected=\"false\">Brussel sprout is the only vegetable in this list.</choicehint></choice>\n    <compoundhint value=\"A*B\">Making a banana split?</compoundhint>\n    <compoundhint value=\"B*D\">That will make a horrible dessert: a brussel sprout split?</compoundhint>\n  </checkboxgroup>\n</choiceresponse>\n\n\n</problem>");
    });
    return it('produces xml also with demand hints', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Select all the fruits from the list<<\n\n        [x] Apple     	 	 {{ selected: You're right that apple is a fruit. }, {unselected: Remember that apple is also a fruit.}}\n        [ ] Mushroom	   	 {{U: You're right that mushrooms aren't fruit}, { selected: Mushroom is a fungus, not a fruit.}}\n        [x] Grape		     {{ selected: You're right that grape is a fruit }, {unselected: Remember that grape is also a fruit.}}\n        [ ] Mustang\n        [ ] Camero            {{S:I don't know what a Camero is but it isn't a fruit.},{U:What is a camero anyway?}}\n\n\n        {{ ((A*B)) You're right that apple is a fruit, but there's one you're missing. Also, mushroom is not a fruit.}}\n        {{ ((B*C)) You're right that grape is a fruit, but there's one you're missing. Also, mushroom is not a fruit.}}\n\n\n\n>>Select all the vegetables from the list<<\n\n        [ ] Banana     	 	 {{ selected: No, sorry, a banana is a fruit. }, {unselected: poor banana.}}\n        [ ] Ice Cream\n        [ ] Mushroom	   	 {{U: You're right that mushrooms aren't vegatbles}, { selected: Mushroom is a fungus, not a vegetable.}}\n        [x] Brussel Sprout	 {{S: Brussel sprouts are vegetables.}, {u: Brussel sprout is the only vegetable in this list.}}\n\n\n        {{ ((A*B)) Making a banana split? }}\n        {{ ((B*D)) That will make a horrible dessert: a brussel sprout split? }}\n\n\n|| Hint one.||\n|| Hint two. ||\n|| Hint three. ||");
      return expect(data).toEqual("<problem>\n<p>Select all the fruits from the list</p>\n<choiceresponse>\n  <checkboxgroup label=\"Select all the fruits from the list\">\n    <choice correct=\"true\">Apple\n      <choicehint selected=\"true\">You're right that apple is a fruit.</choicehint>\n      <choicehint selected=\"false\">Remember that apple is also a fruit.</choicehint></choice>\n    <choice correct=\"false\">Mushroom\n      <choicehint selected=\"true\">Mushroom is a fungus, not a fruit.</choicehint>\n      <choicehint selected=\"false\">You're right that mushrooms aren't fruit</choicehint></choice>\n    <choice correct=\"true\">Grape\n      <choicehint selected=\"true\">You're right that grape is a fruit</choicehint>\n      <choicehint selected=\"false\">Remember that grape is also a fruit.</choicehint></choice>\n    <choice correct=\"false\">Mustang</choice>\n    <choice correct=\"false\">Camero\n      <choicehint selected=\"true\">I don't know what a Camero is but it isn't a fruit.</choicehint>\n      <choicehint selected=\"false\">What is a camero anyway?</choicehint></choice>\n    <compoundhint value=\"A*B\">You're right that apple is a fruit, but there's one you're missing. Also, mushroom is not a fruit.</compoundhint>\n    <compoundhint value=\"B*C\">You're right that grape is a fruit, but there's one you're missing. Also, mushroom is not a fruit.</compoundhint>\n  </checkboxgroup>\n</choiceresponse>\n\n<p>Select all the vegetables from the list</p>\n<choiceresponse>\n  <checkboxgroup label=\"Select all the vegetables from the list\">\n    <choice correct=\"false\">Banana\n      <choicehint selected=\"true\">No, sorry, a banana is a fruit.</choicehint>\n      <choicehint selected=\"false\">poor banana.</choicehint></choice>\n    <choice correct=\"false\">Ice Cream</choice>\n    <choice correct=\"false\">Mushroom\n      <choicehint selected=\"true\">Mushroom is a fungus, not a vegetable.</choicehint>\n      <choicehint selected=\"false\">You're right that mushrooms aren't vegatbles</choicehint></choice>\n    <choice correct=\"true\">Brussel Sprout\n      <choicehint selected=\"true\">Brussel sprouts are vegetables.</choicehint>\n      <choicehint selected=\"false\">Brussel sprout is the only vegetable in this list.</choicehint></choice>\n    <compoundhint value=\"A*B\">Making a banana split?</compoundhint>\n    <compoundhint value=\"B*D\">That will make a horrible dessert: a brussel sprout split?</compoundhint>\n  </checkboxgroup>\n</choiceresponse>\n\n\n<demandhint>\n  <hint>Hint one.</hint>\n  <hint>Hint two.</hint>\n  <hint>Hint three.</hint>\n</demandhint>\n</problem>");
    });
  });

  describe('Markdown to xml extended hint multiple choice', function() {
    it('produces xml', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Select the fruit from the list<<\n               \n      () Mushroom	  	 {{ Mushroom is a fungus, not a fruit.}}\n      () Potato\n     (x) Apple     	 	 {{ OUTSTANDING::Apple is indeed a fruit.}}\n\n>>Select the vegetables from the list<<\n\n      () Mushroom	  	 {{ Mushroom is a fungus, not a vegetable.}}\n      (x) Potato	                 {{ Potato is a root vegetable. }}\n      () Apple     	 	 {{ OOPS::Apple is a fruit.}}");
      return expect(data).toEqual("<problem>\n<p>Select the fruit from the list</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"Select the fruit from the list\" type=\"MultipleChoice\">\n    <choice correct=\"false\">Mushroom <choicehint>Mushroom is a fungus, not a fruit.</choicehint></choice>\n    <choice correct=\"false\">Potato</choice>\n    <choice correct=\"true\">Apple <choicehint label=\"OUTSTANDING\">Apple is indeed a fruit.</choicehint></choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n<p>Select the vegetables from the list</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"Select the vegetables from the list\" type=\"MultipleChoice\">\n    <choice correct=\"false\">Mushroom <choicehint>Mushroom is a fungus, not a vegetable.</choicehint></choice>\n    <choice correct=\"true\">Potato <choicehint>Potato is a root vegetable.</choicehint></choice>\n    <choice correct=\"false\">Apple <choicehint label=\"OOPS\">Apple is a fruit.</choicehint></choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n\n</problem>");
    });
    return it('produces xml with demand hints', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Select the fruit from the list<<\n\n           () Mushroom	  	 {{ Mushroom is a fungus, not a fruit.}}\n           () Potato\n          (x) Apple     	 	 {{ OUTSTANDING::Apple is indeed a fruit.}}\n    \n    \n|| 0) spaces on previous line. ||\n|| 1) roses are red. ||\n>>Select the vegetables from the list<<\n\n           () Mushroom	  	 {{ Mushroom is a fungus, not a vegetable.}}\n                                 \n           (x) Potato	                 {{ Potato is a root vegetable. }}\n           () Apple     	 	 {{ OOPS::Apple is a fruit.}}\n  \n  \n|| 2) where are the lions? ||\n\n\n");
      return expect(data).toEqual("<problem>\n<p>Select the fruit from the list</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"Select the fruit from the list\" type=\"MultipleChoice\">\n    <choice correct=\"false\">Mushroom <choicehint>Mushroom is a fungus, not a fruit.</choicehint></choice>\n    <choice correct=\"false\">Potato</choice>\n    <choice correct=\"true\">Apple <choicehint label=\"OUTSTANDING\">Apple is indeed a fruit.</choicehint></choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n<p>Select the vegetables from the list</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"Select the vegetables from the list\" type=\"MultipleChoice\">\n    <choice correct=\"false\">Mushroom <choicehint>Mushroom is a fungus, not a vegetable.</choicehint></choice>\n    <choice correct=\"true\">Potato <choicehint>Potato is a root vegetable.</choicehint></choice>\n    <choice correct=\"false\">Apple <choicehint label=\"OOPS\">Apple is a fruit.</choicehint></choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n\n<demandhint>\n  <hint>0) spaces on previous line.</hint>\n  <hint>1) roses are red.</hint>\n  <hint>2) where are the lions?</hint>\n</demandhint>\n</problem>");
    });
  });

  describe('Markdown to xml extended hint text input', function() {
    it('produces xml', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>In which country would you find the city of Paris?<<\n= France		{{ BRAVO::Viva la France! }}\n");
      return expect(data).toEqual("<problem>\n<p>In which country would you find the city of Paris?</p>\n<stringresponse answer=\"France\" type=\"ci\" >\n  <correcthint label=\"BRAVO\">Viva la France!</correcthint>\n  <textline label=\"In which country would you find the city of Paris?\" size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with or=', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Where Paris?<<\n= France		{{ BRAVO::hint1}}\nor= USA			{{   meh::hint2  }}\n");
      return expect(data).toEqual("<problem>\n<p>Where Paris?</p>\n<stringresponse answer=\"France\" type=\"ci\" >\n  <correcthint label=\"BRAVO\">hint1</correcthint>\n  <additional_answer answer=\"USA\"><correcthint label=\"meh\">hint2</correcthint></additional_answer>\n  <textline label=\"Where Paris?\" size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with not=', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Revenge is a dish best served<<\n= cold {{khaaaaaan!}}\nnot= warm {{feedback2}}\n");
      return expect(data).toEqual("<problem>\n<p>Revenge is a dish best served</p>\n<stringresponse answer=\"cold\" type=\"ci\" >\n  <correcthint>khaaaaaan!</correcthint>\n  <stringequalhint answer=\"warm\">feedback2</stringequalhint>\n  <textline label=\"Revenge is a dish best served\" size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with s=', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q<<\ns= 2 {{feedback1}}\n");
      return expect(data).toEqual("<problem>\n<p>q</p>\n<stringresponse answer=\"2\" type=\"ci\" >\n  <correcthint>feedback1</correcthint>\n  <textline label=\"q\" size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with = and or= and not=', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q<<\n= aaa\nor= bbb {{feedback1}}\nnot= no {{feedback2}}\nor= ccc\n");
      return expect(data).toEqual("<problem>\n<p>q</p>\n<stringresponse answer=\"aaa\" type=\"ci\" >\n  <additional_answer answer=\"bbb\"><correcthint>feedback1</correcthint></additional_answer>\n  <stringequalhint answer=\"no\">feedback2</stringequalhint>\n  <additional_answer answer=\"ccc\"></additional_answer>\n  <textline label=\"q\" size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with s= and or=', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q<<\ns= 2 {{feedback1}}\nor= bbb {{feedback2}}\nor= ccc\n");
      return expect(data).toEqual("<problem>\n<p>q</p>\n<stringresponse answer=\"2\" type=\"ci\" >\n  <correcthint>feedback1</correcthint>\n  <additional_answer answer=\"bbb\"><correcthint>feedback2</correcthint></additional_answer>\n  <additional_answer answer=\"ccc\"></additional_answer>\n  <textline label=\"q\" size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with each = making a new question', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q<<\n= aaa\nor= bbb\ns= ccc\n");
      return expect(data).toEqual("<problem>\n<p>q</p>\n<stringresponse answer=\"aaa\" type=\"ci\" >\n  <additional_answer answer=\"bbb\"></additional_answer>\n  <textline label=\"q\" size=\"20\"/>\n</stringresponse>\n<stringresponse answer=\"ccc\" type=\"ci\" >\n  <textline size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    it('produces xml with each = making a new question amid blank lines and paragraphs', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml("paragraph\n>>q<<\n= aaa\n\nor= bbb\ns= ccc\n\nparagraph 2\n");
      return expect(data).toEqual("<problem>\n<p>paragraph</p>\n<p>q</p>\n<stringresponse answer=\"aaa\" type=\"ci\" >\n  <additional_answer answer=\"bbb\"></additional_answer>\n  <textline label=\"q\" size=\"20\"/>\n</stringresponse>\n<stringresponse answer=\"ccc\" type=\"ci\" >\n  <textline size=\"20\"/>\n</stringresponse>\n\n<p>paragraph 2</p>\n\n</problem>");
    });
    it('produces xml without a question when or= is just hung out there by itself', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml("paragraph\n>>q<<\nor= aaa\nparagraph 2\n");
      return expect(data).toEqual("<problem>\n<p>paragraph</p>\n<p>q</p>\n<p>or= aaa</p>\n<p>paragraph 2</p>\n\n</problem>");
    });
    it('produces xml with each = with feedback making a new question', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q<<\ns= aaa\nor= bbb {{feedback1}}\n= ccc {{feedback2}}\n");
      return expect(data).toEqual("<problem>\n<p>q</p>\n<stringresponse answer=\"aaa\" type=\"ci\" >\n  <additional_answer answer=\"bbb\"><correcthint>feedback1</correcthint></additional_answer>\n  <textline label=\"q\" size=\"20\"/>\n</stringresponse>\n<stringresponse answer=\"ccc\" type=\"ci\" >\n  <correcthint>feedback2</correcthint>\n  <textline size=\"20\"/>\n</stringresponse>\n\n</problem>");
    });
    return it('produces xml with demand hints', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Where Paris?<<\n= France		{{ BRAVO::hint1 }}\n\n|| There are actually two countries with cities named Paris. ||\n|| Paris is the capital of one of those countries. ||\n");
      return expect(data).toEqual("<problem>\n<p>Where Paris?</p>\n<stringresponse answer=\"France\" type=\"ci\" >\n  <correcthint label=\"BRAVO\">hint1</correcthint>\n  <textline label=\"Where Paris?\" size=\"20\"/>\n</stringresponse>\n\n<demandhint>\n  <hint>There are actually two countries with cities named Paris.</hint>\n  <hint>Paris is the capital of one of those countries.</hint>\n</demandhint>\n</problem>");
    });
  });

  describe('Markdown to xml extended hint numeric input', function() {
    it('produces xml', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Enter the numerical value of Pi:<<\n= 3.14159 +- .02   {{ Pie for everyone!   }}\n\n>>Enter the approximate value of 502*9:<<\n= 4518 +- 15%  {{PIE:: No pie for you!}}\n\n>>Enter the number of fingers on a human hand<<\n= 5\n\n");
      return expect(data).toEqual("<problem>\n<p>Enter the numerical value of Pi:</p>\n<numericalresponse answer=\"3.14159\">\n  <responseparam type=\"tolerance\" default=\".02\" />\n  <formulaequationinput label=\"Enter the numerical value of Pi:\" />\n  <correcthint>Pie for everyone!</correcthint>\n</numericalresponse>\n\n<p>Enter the approximate value of 502*9:</p>\n<numericalresponse answer=\"4518\">\n  <responseparam type=\"tolerance\" default=\"15%\" />\n  <formulaequationinput label=\"Enter the approximate value of 502*9:\" />\n  <correcthint label=\"PIE\">No pie for you!</correcthint>\n</numericalresponse>\n\n<p>Enter the number of fingers on a human hand</p>\n<numericalresponse answer=\"5\">\n  <formulaequationinput label=\"Enter the number of fingers on a human hand\" />\n</numericalresponse>\n\n\n</problem>");
    });
    return it('numeric input with hints and demand hints', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>text1<<\n= 1   {{ hint1  }}\n|| hintA ||\n>>text2<<\n= 2 {{ hint2 }}\n\n|| hintB ||\n");
      return expect(data).toEqual("<problem>\n<p>text1</p>\n<numericalresponse answer=\"1\">\n  <formulaequationinput label=\"text1\" />\n  <correcthint>hint1</correcthint>\n</numericalresponse>\n<p>text2</p>\n<numericalresponse answer=\"2\">\n  <formulaequationinput label=\"text2\" />\n  <correcthint>hint2</correcthint>\n</numericalresponse>\n\n<demandhint>\n  <hint>hintA</hint>\n  <hint>hintB</hint>\n</demandhint>\n</problem>");
    });
  });

  describe('Markdown to xml extended hint with multiline hints', function() {
    return it('produces xml', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>Checkboxes<<\n\n[x] A {{ \nselected:  aaa  },\n{unselected:bbb}}\n[ ] B {{U: c}, { \nselected: d.}}\n\n{{ ((A*B)) A*B hint}}\n\n>>What is 1 + 1?<<\n= 2  {{ part one, and\n        part two\n     }}\n\n>>hello?<<\n= hello {{\nhello\nhint\n}}\n\n>>multiple choice<<\n(x) AA{{hint1}}\n() BB    {{\n     hint2\n}}\n( )  CC  {{ hint3\n}}\n\n>>dropdown<<\n[[\n   W1  {{ \n  	no }}\n   W2	                  {{\n   nope}}\n   (C1)	 {{ yes\n    }}\n]]\n\n|| aaa ||\n||bbb||\n||       ccc      ||\n");
      return expect(data).toEqual("<problem>\n<p>Checkboxes</p>\n<choiceresponse>\n  <checkboxgroup label=\"Checkboxes\">\n    <choice correct=\"true\">A\n      <choicehint selected=\"true\">aaa</choicehint>\n      <choicehint selected=\"false\">bbb</choicehint></choice>\n    <choice correct=\"false\">B\n      <choicehint selected=\"true\">d.</choicehint>\n      <choicehint selected=\"false\">c</choicehint></choice>\n    <compoundhint value=\"A*B\">A*B hint</compoundhint>\n  </checkboxgroup>\n</choiceresponse>\n\n<p>What is 1 + 1?</p>\n<numericalresponse answer=\"2\">\n  <formulaequationinput label=\"What is 1 + 1?\" />\n  <correcthint>part one, and part two</correcthint>\n</numericalresponse>\n\n<p>hello?</p>\n<stringresponse answer=\"hello\" type=\"ci\" >\n  <correcthint>hello hint</correcthint>\n  <textline label=\"hello?\" size=\"20\"/>\n</stringresponse>\n\n<p>multiple choice</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"multiple choice\" type=\"MultipleChoice\">\n    <choice correct=\"true\">AA <choicehint>hint1</choicehint></choice>\n    <choice correct=\"false\">BB <choicehint>hint2</choicehint></choice>\n    <choice correct=\"false\">CC <choicehint>hint3</choicehint></choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n<p>dropdown</p>\n\n<optionresponse>\n  <optioninput label=\"dropdown\">\n    <option correct=\"False\">W1 <optionhint>no</optionhint></option>\n    <option correct=\"False\">W2 <optionhint>nope</optionhint></option>\n    <option correct=\"True\">C1 <optionhint>yes</optionhint></option>\n  </optioninput>\n</optionresponse>\n\n<demandhint>\n  <hint>aaa</hint>\n  <hint>bbb</hint>\n  <hint>ccc</hint>\n</demandhint>\n</problem>");
    });
  });

  describe('Markdown to xml extended hint with tricky syntax cases', function() {
    it('produces xml with unicode', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>á and Ø<<\n\n(x) Ø{{Ø}}\n() BB\n\n|| Ø ||\n");
      return expect(data).toEqual("<problem>\n<p>á and Ø</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"á and Ø\" type=\"MultipleChoice\">\n    <choice correct=\"true\">Ø <choicehint>Ø</choicehint></choice>\n    <choice correct=\"false\">BB</choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n\n<demandhint>\n  <hint>Ø</hint>\n</demandhint>\n</problem>");
    });
    it('produces xml with quote-type characters', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>\"quotes\" aren't `fun`<<\n() \"hello\" {{ isn't }}\n(x) \"isn't\"  {{ \"hello\" }}\n");
      return expect(data).toEqual("<problem>\n<p>\"quotes\" aren't `fun`</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"&quot;quotes&quot; aren&apos;t `fun`\" type=\"MultipleChoice\">\n    <choice correct=\"false\">\"hello\" <choicehint>isn't</choicehint></choice>\n    <choice correct=\"true\">\"isn't\" <choicehint>\"hello\"</choicehint></choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n\n</problem>");
    });
    it('produces xml with almost but not quite multiple choice syntax', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q1<<\nthis (x)\n() a  {{ (hint) }}\n(x) b\nthat (y)");
      return expect(data).toEqual("<problem>\n<p>q1</p>\n<p>this (x)</p>\n<multiplechoiceresponse>\n  <choicegroup label=\"q1\" type=\"MultipleChoice\">\n    <choice correct=\"false\">a <choicehint>(hint)</choicehint></choice>\n    <choice correct=\"true\">b</choice>\n  </choicegroup>\n</multiplechoiceresponse>\n\n<p>that (y)</p>\n</problem>");
    });
    it('produce xml with almost but not quite checkboxgroup syntax', function() {
      var data;
      data = MarkdownEditingDescriptor.markdownToXml(">>q1<<\nthis [x]\n[ ] a [square]\n[x] b {{ this hint passes through }}\nthat []");
      return expect(data).toEqual("<problem>\n<p>q1</p>\n<p>this [x]</p>\n<choiceresponse>\n  <checkboxgroup label=\"q1\">\n    <choice correct=\"false\">a [square]</choice>\n    <choice correct=\"true\">b {{ this hint passes through }}</choice>\n  </checkboxgroup>\n</choiceresponse>\n\n<p>that []</p>\n</problem>");
    });
    return it('produces xml with DOS \r\n line endings', function() {
      var data, markdown;
      markdown = ">>q22<<\n\n[[  \n   (x) {{ hintx\n       these\n       span\n       }}\n\n   yy	                 {{ meh::hinty }}\n   zzz	{{ hintz }}\n]]";
      markdown = markdown.replace(/\n/g, '\r\n');
      data = MarkdownEditingDescriptor.markdownToXml(markdown);
      return expect(data).toEqual("<problem>\n<p>q22</p>\n<optionresponse>\n  <optioninput label=\"q22\">\n    <option correct=\"True\">x <optionhint>hintx these span</optionhint></option>\n    <option correct=\"False\">yy <optionhint label=\"meh\">hinty</optionhint></option>\n    <option correct=\"False\">zzz <optionhint>hintz</optionhint></option>\n  </optioninput>\n</optionresponse>\n\n\n</problem>");
    });
  });

}).call(this);
