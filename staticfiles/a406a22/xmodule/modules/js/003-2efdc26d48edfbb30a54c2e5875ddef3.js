// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.Annotatable = (function() {

    Annotatable.prototype._debug = false;

    Annotatable.prototype.wrapperSelector = '.annotatable-wrapper';

    Annotatable.prototype.toggleAnnotationsSelector = '.annotatable-toggle-annotations';

    Annotatable.prototype.toggleInstructionsSelector = '.annotatable-toggle-instructions';

    Annotatable.prototype.instructionsSelector = '.annotatable-instructions';

    Annotatable.prototype.sectionSelector = '.annotatable-section';

    Annotatable.prototype.spanSelector = '.annotatable-span';

    Annotatable.prototype.replySelector = '.annotatable-reply';

    Annotatable.prototype.problemXModuleSelector = '.xmodule_CapaModule';

    Annotatable.prototype.problemSelector = 'div.problem';

    Annotatable.prototype.problemInputSelector = 'div.problem .annotation-input';

    Annotatable.prototype.problemReturnSelector = 'div.problem .annotation-return';

    function Annotatable(el) {
      var _this = this;
      this.onMoveTip = function(event, api, position) {
        return Annotatable.prototype.onMoveTip.apply(_this, arguments);
      };
      this.onShowTip = function(event, api) {
        return Annotatable.prototype.onShowTip.apply(_this, arguments);
      };
      this.onClickReturn = function(e) {
        return Annotatable.prototype.onClickReturn.apply(_this, arguments);
      };
      this.onClickReply = function(e) {
        return Annotatable.prototype.onClickReply.apply(_this, arguments);
      };
      this.onClickToggleInstructions = function(e) {
        return Annotatable.prototype.onClickToggleInstructions.apply(_this, arguments);
      };
      this.onClickToggleAnnotations = function(e) {
        return Annotatable.prototype.onClickToggleAnnotations.apply(_this, arguments);
      };
      if (this._debug) {
        console.log('loaded Annotatable');
      }
      this.el = el;
      this.$el = $(el);
      this.init();
    }

    Annotatable.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Annotatable.prototype.init = function() {
      this.initEvents();
      return this.initTips();
    };

    Annotatable.prototype.initEvents = function() {
      var _ref;
      _ref = [false, false], this.annotationsHidden = _ref[0], this.instructionsHidden = _ref[1];
      this.$(this.toggleAnnotationsSelector).bind('click', this.onClickToggleAnnotations);
      this.$(this.toggleInstructionsSelector).bind('click', this.onClickToggleInstructions);
      this.$el.delegate(this.replySelector, 'click', this.onClickReply);
      return $('body').delegate(this.problemReturnSelector, 'click', this.onClickReturn);
    };

    Annotatable.prototype.initTips = function() {
      var _this = this;
      return this.$(this.spanSelector).each(function(index, el) {
        return $(el).qtip(_this.getSpanTipOptions(el));
      });
    };

    Annotatable.prototype.getSpanTipOptions = function(el) {
      return {
        content: {
          title: {
            text: this.makeTipTitle(el)
          },
          text: this.makeTipContent(el)
        },
        position: {
          my: 'bottom center',
          at: 'top center',
          target: $(el),
          container: this.$(this.wrapperSelector),
          adjust: {
            y: -5
          }
        },
        show: {
          event: 'click mouseenter',
          solo: true
        },
        hide: {
          event: 'click mouseleave',
          delay: 500,
          fixed: true
        },
        style: {
          classes: 'ui-tooltip-annotatable'
        },
        events: {
          show: this.onShowTip,
          move: this.onMoveTip
        }
      };
    };

    Annotatable.prototype.onClickToggleAnnotations = function(e) {
      return this.toggleAnnotations();
    };

    Annotatable.prototype.onClickToggleInstructions = function(e) {
      return this.toggleInstructions();
    };

    Annotatable.prototype.onClickReply = function(e) {
      return this.replyTo(e.currentTarget);
    };

    Annotatable.prototype.onClickReturn = function(e) {
      return this.returnFrom(e.currentTarget);
    };

    Annotatable.prototype.onShowTip = function(event, api) {
      if (this.annotationsHidden) {
        return event.preventDefault();
      }
    };

    Annotatable.prototype.onMoveTip = function(event, api, position) {
      /*
      This method handles an edge case in which a tooltip is displayed above
      a non-overlapping span like this:
      
                           (( TOOLTIP ))
                                \/
      text text text ... text text text ...... <span span span>
      <span span span>
      
      The problem is that the tooltip looks disconnected from both spans, so
      we should re-position the tooltip to appear above the span.
      */

      var adjust_y, container, container_offset, focus_rect, is_non_overlapping, offset_left, offset_top, rect_center, rect_top, rects, target, tip, tip_height, tip_left, tip_top, tip_width, win_width, _ref, _ref1, _ref2;
      tip = api.elements.tooltip;
      adjust_y = ((_ref = api.options.position) != null ? (_ref1 = _ref.adjust) != null ? _ref1.y : void 0 : void 0) || 0;
      container = ((_ref2 = api.options.position) != null ? _ref2.container : void 0) || $('body');
      target = api.elements.target;
      rects = $(target).get(0).getClientRects();
      is_non_overlapping = (rects != null ? rects.length : void 0) === 2 && rects[0].left > rects[1].right;
      if (is_non_overlapping) {
        focus_rect = (rects[0].width > rects[1].width ? rects[0] : rects[1]);
        rect_center = focus_rect.left + (focus_rect.width / 2);
        rect_top = focus_rect.top;
        tip_width = $(tip).width();
        tip_height = $(tip).height();
        container_offset = $(container).offset();
        offset_left = -container_offset.left;
        offset_top = $(document).scrollTop() - container_offset.top;
        tip_left = offset_left + rect_center - (tip_width / 2);
        tip_top = offset_top + rect_top - tip_height + adjust_y;
        win_width = $(window).width();
        if (tip_left < offset_left) {
          tip_left = offset_left;
        } else if (tip_left + tip_width > win_width + offset_left) {
          tip_left = win_width + offset_left - tip_width;
        }
        return $.extend(position, {
          'left': tip_left,
          'top': tip_top
        });
      }
    };

    Annotatable.prototype.getSpanForProblemReturn = function(el) {
      var problem_id;
      problem_id = $(this.problemReturnSelector).index(el);
      return this.$(this.spanSelector).filter("[data-problem-id='" + problem_id + "']");
    };

    Annotatable.prototype.getProblem = function(el) {
      var problem_id;
      problem_id = this.getProblemId(el);
      return $(this.problemSelector).has(this.problemInputSelector).eq(problem_id);
    };

    Annotatable.prototype.getProblemId = function(el) {
      return $(el).data('problem-id');
    };

    Annotatable.prototype.toggleAnnotations = function() {
      var hide;
      hide = (this.annotationsHidden = !this.annotationsHidden);
      this.toggleAnnotationButtonText(hide);
      this.toggleSpans(hide);
      return this.toggleTips(hide);
    };

    Annotatable.prototype.toggleTips = function(hide) {
      var visible;
      visible = this.findVisibleTips();
      return this.hideTips(visible);
    };

    Annotatable.prototype.toggleAnnotationButtonText = function(hide) {
      var buttonText;
      if (hide) {
        buttonText = gettext('Show Annotations');
      } else {
        buttonText = gettext('Hide Annotations');
      }
      return this.$(this.toggleAnnotationsSelector).text(buttonText);
    };

    Annotatable.prototype.toggleInstructions = function() {
      var hide;
      hide = (this.instructionsHidden = !this.instructionsHidden);
      this.toggleInstructionsButton(hide);
      return this.toggleInstructionsText(hide);
    };

    Annotatable.prototype.toggleInstructionsButton = function(hide) {
      var cls, txt;
      if (hide) {
        txt = gettext('Expand Instructions');
      } else {
        txt = gettext('Collapse Instructions');
      }
      cls = (hide ? ['expanded', 'collapsed'] : ['collapsed', 'expanded']);
      return this.$(this.toggleInstructionsSelector).text(txt).removeClass(cls[0]).addClass(cls[1]);
    };

    Annotatable.prototype.toggleInstructionsText = function(hide) {
      var slideMethod;
      slideMethod = (hide ? 'slideUp' : 'slideDown');
      return this.$(this.instructionsSelector)[slideMethod]();
    };

    Annotatable.prototype.toggleSpans = function(hide) {
      return this.$(this.spanSelector).toggleClass('hide', hide, 250);
    };

    Annotatable.prototype.replyTo = function(buttonEl) {
      var el, offset;
      offset = -20;
      el = this.getProblem(buttonEl);
      if (el.length > 0) {
        return this.scrollTo(el, this.afterScrollToProblem, offset);
      } else {
        if (this._debug) {
          return console.log('problem not found. event: ', e);
        }
      }
    };

    Annotatable.prototype.returnFrom = function(buttonEl) {
      var el, offset;
      offset = -200;
      el = this.getSpanForProblemReturn(buttonEl);
      if (el.length > 0) {
        return this.scrollTo(el, this.afterScrollToSpan, offset);
      } else {
        if (this._debug) {
          return console.log('span not found. event:', e);
        }
      }
    };

    Annotatable.prototype.scrollTo = function(el, after, offset) {
      var _this = this;
      if (offset == null) {
        offset = -20;
      }
      if ($(el).length > 0) {
        return $('html,body').scrollTo(el, {
          duration: 500,
          onAfter: this._once(function() {
            return after != null ? after.call(_this, el) : void 0;
          }),
          offset: offset
        });
      }
    };

    Annotatable.prototype.afterScrollToProblem = function(problem_el) {
      return problem_el.effect('highlight', {}, 500);
    };

    Annotatable.prototype.afterScrollToSpan = function(span_el) {
      return span_el.addClass('selected', 400, 'swing', function() {
        return span_el.removeClass('selected', 400, 'swing');
      });
    };

    Annotatable.prototype.makeTipContent = function(el) {
      var _this = this;
      return function(api) {
        var comment, problem_id, reply, text;
        text = $(el).data('comment-body');
        comment = _this.createComment(text);
        problem_id = _this.getProblemId(el);
        reply = _this.createReplyLink(problem_id);
        return $(comment).add(reply);
      };
    };

    Annotatable.prototype.makeTipTitle = function(el) {
      var _this = this;
      return function(api) {
        var title;
        title = $(el).data('comment-title');
        if (title) {
          return title;
        } else {
          return gettext('Commentary');
        }
      };
    };

    Annotatable.prototype.createComment = function(text) {
      return $("<div class=\"annotatable-comment\">" + text + "</div>");
    };

    Annotatable.prototype.createReplyLink = function(problem_id) {
      var linktxt;
      linktxt = gettext('Reply to Annotation');
      return $("<a class=\"annotatable-reply\" href=\"javascript:void(0);\" data-problem-id=\"" + problem_id + "\">" + linktxt + "</a>");
    };

    Annotatable.prototype.findVisibleTips = function() {
      var visible;
      visible = [];
      this.$(this.spanSelector).each(function(index, el) {
        var api, tip;
        api = $(el).qtip('api');
        tip = $(api != null ? api.elements.tooltip : void 0);
        if (tip.is(':visible')) {
          return visible.push(el);
        }
      });
      return visible;
    };

    Annotatable.prototype.hideTips = function(elements) {
      return $(elements).qtip('hide');
    };

    Annotatable.prototype._once = function(fn) {
      var done,
        _this = this;
      done = false;
      return function() {
        if (!done) {
          fn.call(_this);
        }
        return done = true;
      };
    };

    return Annotatable;

  })();

}).call(this);
