// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseView = (function(_super) {

      __extends(ThreadResponseView, _super);

      function ThreadResponseView() {
        var _this = this;
        this.update = function(event) {
          return ThreadResponseView.prototype.update.apply(_this, arguments);
        };
        this.edit = function(event) {
          return ThreadResponseView.prototype.edit.apply(_this, arguments);
        };
        this.cancelEdit = function(event) {
          return ThreadResponseView.prototype.cancelEdit.apply(_this, arguments);
        };
        this._delete = function(event) {
          return ThreadResponseView.prototype._delete.apply(_this, arguments);
        };
        this.renderComment = function(comment) {
          return ThreadResponseView.prototype.renderComment.apply(_this, arguments);
        };
        return ThreadResponseView.__super__.constructor.apply(this, arguments);
      }

      ThreadResponseView.prototype.tagName = "li";

      ThreadResponseView.prototype.className = "forum-response";

      ThreadResponseView.prototype.events = {
        "click .discussion-submit-comment": "submitComment",
        "focus .wmd-input": "showEditorChrome"
      };

      ThreadResponseView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseView.prototype.initialize = function(options) {
        this.collapseComments = options.collapseComments;
        this.createShowView();
        return this.readOnly = $('.discussion-module').data('read-only');
      };

      ThreadResponseView.prototype.renderTemplate = function() {
        var container, templateData, _ref;
        this.template = _.template($("#thread-response-template").html());
        container = $("#discussion-container");
        if (!container.length) {
          container = $(".discussion-module");
        }
        templateData = _.extend(this.model.toJSON(), {
          wmdId: (_ref = this.model.id) != null ? _ref : (new Date()).getTime(),
          create_sub_comment: container.data("user-create-subcomment"),
          readOnly: this.readOnly
        });
        return this.template(templateData);
      };

      ThreadResponseView.prototype.render = function() {
        this.$el.addClass("response_" + this.model.get("id"));
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        if (this.model.get("thread").get("closed")) {
          this.hideCommentForm();
        }
        this.renderComments();
        return this;
      };

      ThreadResponseView.prototype.afterInsert = function() {
        this.makeWmdEditor("comment-body");
        return this.hideEditorChrome();
      };

      ThreadResponseView.prototype.hideEditorChrome = function() {
        this.$('.wmd-button-row').hide();
        this.$('.wmd-preview-container').hide();
        this.$('.wmd-input').css({
          height: '35px',
          padding: '5px'
        });
        return this.$('.comment-post-control').hide();
      };

      ThreadResponseView.prototype.showEditorChrome = function() {
        this.$('.wmd-button-row').show();
        this.$('.wmd-preview-container').show();
        this.$('.comment-post-control').show();
        return this.$('.wmd-input').css({
          height: '125px',
          padding: '10px'
        });
      };

      ThreadResponseView.prototype.renderComments = function() {
        var collectComments, comments,
          _this = this;
        comments = new Comments();
        this.commentViews = [];
        comments.comparator = function(comment) {
          return comment.get('created_at');
        };
        collectComments = function(comment) {
          var children;
          comments.add(comment);
          children = new Comments(comment.get('children'));
          return children.each(function(child) {
            child.parent = comment;
            return collectComments(child);
          });
        };
        this.model.get('comments').each(collectComments);
        comments.each(function(comment) {
          return _this.renderComment(comment, false, null);
        });
        if (this.collapseComments && comments.length) {
          this.$(".comments").hide();
          return this.$(".action-show-comments").on("click", function(event) {
            event.preventDefault();
            _this.$(".action-show-comments").hide();
            return _this.$(".comments").show();
          });
        } else {
          return this.$(".action-show-comments").hide();
        }
      };

      ThreadResponseView.prototype.renderComment = function(comment) {
        var view,
          _this = this;
        comment.set('thread', this.model.get('thread'));
        view = new ResponseCommentView({
          model: comment
        });
        view.render();
        if (this.readOnly) {
          this.$el.find('.comments').append(view.el);
        } else {
          this.$el.find(".comments .new-comment").before(view.el);
        }
        view.bind("comment:edit", function(event) {
          if (_this.editView != null) {
            _this.cancelEdit(event);
          }
          _this.cancelCommentEdits();
          return _this.hideCommentForm();
        });
        view.bind("comment:cancel_edit", function() {
          return _this.showCommentForm();
        });
        this.commentViews.push(view);
        return view;
      };

      ThreadResponseView.prototype.submitComment = function(event) {
        var body, comment, url, view;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("comment-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("comment-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          abuse_flaggers: [],
          user_id: window.user.get("id"),
          id: "unsaved"
        });
        view = this.renderComment(comment);
        this.hideEditorChrome();
        this.trigger("comment:add", comment);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(response, textStatus) {
            comment.set(response.content);
            comment.updateInfo(response.annotated_content_info);
            return view.render();
          }
        });
      };

      ThreadResponseView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this response?"))) {
          return;
        }
        url = this.model.urlFor('_delete');
        this.model.remove();
        this.$el.remove();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      ThreadResponseView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.$el.empty();
        }
        if (this.editView != null) {
          return this.editView.model = this.model;
        } else {
          this.editView = new ThreadResponseEditView({
            model: this.model
          });
          this.editView.bind("response:update", this.update);
          return this.editView.bind("response:cancel_edit", this.cancelEdit);
        }
      };

      ThreadResponseView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.discussion-response'));
        view.render();
        return view.delegateEvents();
      };

      ThreadResponseView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      ThreadResponseView.prototype.cancelCommentEdits = function() {
        return _.each(this.commentViews, function(view) {
          return view.cancelEdit();
        });
      };

      ThreadResponseView.prototype.hideCommentForm = function() {
        return this.$('.comment-form').closest('li').hide();
      };

      ThreadResponseView.prototype.showCommentForm = function() {
        return this.$('.comment-form').closest('li').show();
      };

      ThreadResponseView.prototype.createShowView = function() {
        var _this = this;
        if (this.editView != null) {
          this.editView.$el.empty();
        }
        if (this.showView != null) {
          return this.showView.model = this.model;
        } else {
          this.showView = new ThreadResponseShowView({
            model: this.model
          });
          this.showView.bind("response:_delete", this._delete);
          this.showView.bind("response:edit", this.edit);
          return this.showView.on("comment:endorse", function() {
            return _this.trigger("comment:endorse");
          });
        }
      };

      ThreadResponseView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      ThreadResponseView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        this.renderShowView();
        return this.showCommentForm();
      };

      ThreadResponseView.prototype.edit = function(event) {
        this.createEditView();
        this.renderEditView();
        this.cancelCommentEdits();
        return this.hideCommentForm();
      };

      ThreadResponseView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_comment', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              body: newBody
            });
            _this.createShowView();
            _this.renderShowView();
            return _this.showCommentForm();
          }
        });
      };

      return ThreadResponseView;

    })(DiscussionContentView);
  }

}).call(this);
