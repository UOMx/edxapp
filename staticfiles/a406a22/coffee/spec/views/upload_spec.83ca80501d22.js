// Generated by CoffeeScript 1.6.1
(function() {

  define(["js/models/uploads", "js/views/uploads", "js/models/chapter", "common/js/spec_helpers/ajax_helpers", "js/spec_helpers/modal_helpers"], function(FileUpload, UploadDialog, Chapter, AjaxHelpers, modal_helpers) {
    return describe("UploadDialog", function() {
      var tpl;
      tpl = readFixtures("upload-dialog.underscore");
      beforeEach(function() {
        var dialogResponse, jqMockFileInput, mockFileInput, realMethod,
          _this = this;
        modal_helpers.installModalTemplates();
        appendSetFixtures($("<script>", {
          id: "upload-dialog-tpl",
          type: "text/template"
        }).text(tpl));
        CMS.URL.UPLOAD_ASSET = "/upload";
        this.model = new FileUpload({
          mimeTypes: ['application/pdf']
        });
        this.dialogResponse = dialogResponse = [];
        this.view = new UploadDialog({
          model: this.model,
          url: CMS.URL.UPLOAD_ASSET,
          onSuccess: function(response) {
            return dialogResponse.push(response.response);
          }
        });
        spyOn(this.view, 'remove').andCallThrough();
        this.mockFiles = [];
        mockFileInput = jasmine.createSpy('mockFileInput');
        mockFileInput.files = this.mockFiles;
        jqMockFileInput = jasmine.createSpyObj('jqMockFileInput', ['get', 'replaceWith']);
        jqMockFileInput.get.andReturn(mockFileInput);
        realMethod = this.view.$;
        return spyOn(this.view, "$").andCallFake(function(selector) {
          if (selector === "input[type=file]") {
            return jqMockFileInput;
          } else {
            return realMethod.apply(this, arguments);
          }
        });
      });
      afterEach(function() {
        delete CMS.URL.UPLOAD_ASSET;
        if (this.view && modal_helpers.isShowingModal(this.view)) {
          return this.view.hide();
        }
      });
      describe("Basic", function() {
        it("should render without a file selected", function() {
          this.view.render();
          expect(this.view.$el).toContain("input[type=file]");
          return expect(this.view.$(".action-upload")).toHaveClass("disabled");
        });
        it("should render with a PDF selected", function() {
          var file;
          file = {
            name: "fake.pdf",
            "type": "application/pdf"
          };
          this.mockFiles.push(file);
          this.model.set("selectedFile", file);
          this.view.render();
          expect(this.view.$el).toContain("input[type=file]");
          expect(this.view.$el).not.toContain("#upload_error");
          return expect(this.view.$(".action-upload")).not.toHaveClass("disabled");
        });
        it("should render an error with an invalid file type selected", function() {
          var file;
          file = {
            name: "fake.png",
            "type": "image/png"
          };
          this.mockFiles.push(file);
          this.model.set("selectedFile", file);
          this.view.render();
          expect(this.view.$el).toContain("input[type=file]");
          expect(this.view.$el).toContain("#upload_error");
          return expect(this.view.$(".action-upload")).toHaveClass("disabled");
        });
        return it("should render an error with an invalid file type after a correct file type selected", function() {
          var correctFile, event, inCorrectFile, realMethod;
          correctFile = {
            name: "fake.pdf",
            "type": "application/pdf"
          };
          inCorrectFile = {
            name: "fake.png",
            "type": "image/png"
          };
          event = {};
          this.view.render();
          event.target = {
            "files": [correctFile]
          };
          this.view.selectFile(event);
          expect(this.view.$el).toContain("input[type=file]");
          expect(this.view.$el).not.toContain("#upload_error");
          expect(this.view.$(".action-upload")).not.toHaveClass("disabled");
          realMethod = this.model.set;
          spyOn(this.model, "set").andCallFake(function(data) {
            if (data.selectedFile !== void 0) {
              this.attributes.selectedFile = data.selectedFile;
              return this.changed = {};
            } else {
              return realMethod.apply(this, arguments);
            }
          });
          event.target = {
            "files": [inCorrectFile]
          };
          this.view.selectFile(event);
          expect(this.view.$el).toContain("input[type=file]");
          expect(this.view.$el).toContain("#upload_error");
          return expect(this.view.$(".action-upload")).toHaveClass("disabled");
        });
      });
      return describe("Uploads", function() {
        beforeEach(function() {
          return this.clock = sinon.useFakeTimers();
        });
        afterEach(function() {
          return this.clock.restore();
        });
        it("can upload correctly", function() {
          var request, requests;
          requests = AjaxHelpers["requests"](this);
          this.view.render();
          this.view.upload();
          expect(this.model.get("uploading")).toBeTruthy();
          expect(requests.length).toEqual(1);
          request = requests[0];
          expect(request.url).toEqual("/upload");
          expect(request.method).toEqual("POST");
          request.respond(200, {
            "Content-Type": "application/json"
          }, '{"response": "dummy_response"}');
          expect(this.model.get("uploading")).toBeFalsy();
          expect(this.model.get("finished")).toBeTruthy();
          return expect(this.dialogResponse.pop()).toEqual("dummy_response");
        });
        it("can handle upload errors", function() {
          var requests;
          requests = AjaxHelpers["requests"](this);
          this.view.render();
          this.view.upload();
          requests[0].respond(500);
          expect(this.model.get("title")).toMatch(/error/);
          return expect(this.view.remove).not.toHaveBeenCalled();
        });
        return it("removes itself after two seconds on successful upload", function() {
          var requests;
          requests = AjaxHelpers["requests"](this);
          this.view.render();
          this.view.upload();
          requests[0].respond(200, {
            "Content-Type": "application/json"
          }, '{"response": "dummy_response"}');
          expect(modal_helpers.isShowingModal(this.view)).toBeTruthy();
          this.clock.tick(2001);
          return expect(modal_helpers.isShowingModal(this.view)).toBeFalsy();
        });
      });
    });
  });

}).call(this);
