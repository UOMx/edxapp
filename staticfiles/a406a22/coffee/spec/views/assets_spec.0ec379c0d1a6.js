// Generated by CoffeeScript 1.6.1
(function() {

  define(["jquery", "jasmine", "common/js/spec_helpers/ajax_helpers", "squire"], function($, jasmine, AjaxHelpers, Squire) {
    var assetLibraryTpl, assetTpl;
    assetLibraryTpl = readFixtures('asset-library.underscore');
    assetTpl = readFixtures('asset.underscore');
    describe("Asset view", function() {
      beforeEach(function() {
        var _this = this;
        setFixtures($("<script>", {
          id: "asset-tpl",
          type: "text/template"
        }).text(assetTpl));
        appendSetFixtures(sandbox({
          id: "page-prompt"
        }));
        this.promptSpies = jasmine.createSpyObj('Prompt.Warning', ["constructor", "show", "hide"]);
        this.promptSpies.constructor.andReturn(this.promptSpies);
        this.promptSpies.show.andReturn(this.promptSpies);
        this.confirmationSpies = jasmine.createSpyObj('Notification.Confirmation', ["constructor", "show"]);
        this.confirmationSpies.constructor.andReturn(this.confirmationSpies);
        this.confirmationSpies.show.andReturn(this.confirmationSpies);
        this.savingSpies = jasmine.createSpyObj('Notification.Mini', ["constructor", "show", "hide"]);
        this.savingSpies.constructor.andReturn(this.savingSpies);
        this.savingSpies.show.andReturn(this.savingSpies);
        this.injector = new Squire();
        this.injector.mock("common/js/components/views/feedback_prompt", {
          "Warning": this.promptSpies.constructor
        });
        this.injector.mock("common/js/components/views/feedback_notification", {
          "Confirmation": this.confirmationSpies.constructor,
          "Mini": this.savingSpies.constructor
        });
        runs(function() {
          return _this.injector.require(["js/models/asset", "js/collections/asset", "js/views/asset"], function(AssetModel, AssetCollection, AssetView) {
            _this.model = new AssetModel({
              display_name: "test asset",
              url: 'actual_asset_url',
              portable_url: 'portable_url',
              date_added: 'date',
              thumbnail: null,
              id: 'id'
            });
            spyOn(_this.model, "destroy").andCallThrough();
            spyOn(_this.model, "save").andCallThrough();
            _this.collection = new AssetCollection([_this.model]);
            _this.collection.url = "assets-url";
            return _this.createAssetView = function(test) {
              var requests, view;
              view = new AssetView({
                model: _this.model
              });
              requests = test ? AjaxHelpers["requests"](test) : null;
              return {
                view: view,
                requests: requests
              };
            };
          });
        });
        return waitsFor((function() {
          return _this.createAssetView;
        }), "AssetsView Creation function was not initialized", 1000);
      });
      afterEach(function() {
        this.injector.clean();
        return this.injector.remove();
      });
      describe("Basic", function() {
        it("should render properly", function() {
          var requests, _ref;
          _ref = this.createAssetView(), this.view = _ref.view, requests = _ref.requests;
          this.view.render();
          return expect(this.view.$el).toContainText("test asset");
        });
        return it("should pop a delete confirmation when the delete button is clicked", function() {
          var ctorOptions, requests, _ref;
          _ref = this.createAssetView(), this.view = _ref.view, requests = _ref.requests;
          this.view.render().$(".remove-asset-button").click();
          expect(this.promptSpies.constructor).toHaveBeenCalled();
          ctorOptions = this.promptSpies.constructor.mostRecentCall.args[0];
          expect(ctorOptions.title).toMatch('Delete File Confirmation');
          expect(this.model.destroy).not.toHaveBeenCalled();
          return expect(this.collection).toContain(this.model);
        });
      });
      return describe("AJAX", function() {
        it("should destroy itself on confirmation", function() {
          var ctorOptions, requests, savingOptions, _ref;
          _ref = this.createAssetView(this), this.view = _ref.view, requests = _ref.requests;
          this.view.render().$(".remove-asset-button").click();
          ctorOptions = this.promptSpies.constructor.mostRecentCall.args[0];
          ctorOptions.actions.primary.click(this.promptSpies);
          expect(this.model.destroy).toHaveBeenCalled();
          expect(requests.length).toEqual(1);
          expect(this.confirmationSpies.constructor).not.toHaveBeenCalled();
          expect(this.collection.contains(this.model)).toBeTruthy();
          requests[0].respond(200);
          expect(this.confirmationSpies.constructor).toHaveBeenCalled();
          expect(this.confirmationSpies.show).toHaveBeenCalled();
          savingOptions = this.confirmationSpies.constructor.mostRecentCall.args[0];
          expect(savingOptions.title).toMatch("Your file has been deleted.");
          return expect(this.collection.contains(this.model)).toBeFalsy();
        });
        it("should not destroy itself if server errors", function() {
          var ctorOptions, requests, _ref;
          _ref = this.createAssetView(this), this.view = _ref.view, requests = _ref.requests;
          this.view.render().$(".remove-asset-button").click();
          ctorOptions = this.promptSpies.constructor.mostRecentCall.args[0];
          ctorOptions.actions.primary.click(this.promptSpies);
          expect(this.model.destroy).toHaveBeenCalled();
          requests[0].respond(404);
          expect(this.confirmationSpies.constructor).not.toHaveBeenCalled();
          return expect(this.collection.contains(this.model)).toBeTruthy();
        });
        it("should lock the asset on confirmation", function() {
          var requests, savingOptions, _ref;
          _ref = this.createAssetView(this), this.view = _ref.view, requests = _ref.requests;
          this.view.render().$(".lock-checkbox").click();
          expect(this.model.save).toHaveBeenCalled();
          expect(requests.length).toEqual(1);
          expect(this.savingSpies.constructor).toHaveBeenCalled();
          expect(this.savingSpies.show).toHaveBeenCalled();
          savingOptions = this.savingSpies.constructor.mostRecentCall.args[0];
          expect(savingOptions.title).toMatch("Saving");
          expect(this.model.get("locked")).toBeFalsy();
          requests[0].respond(200);
          expect(this.savingSpies.hide).toHaveBeenCalled();
          return expect(this.model.get("locked")).toBeTruthy();
        });
        return it("should not lock the asset if server errors", function() {
          var requests, _ref;
          _ref = this.createAssetView(this), this.view = _ref.view, requests = _ref.requests;
          this.view.render().$(".lock-checkbox").click();
          requests[0].respond(404);
          expect(this.savingSpies.hide).not.toHaveBeenCalled();
          return expect(this.model.get("locked")).toBeFalsy();
        });
      });
    });
    return describe("Assets view", function() {
      var addMockAsset;
      beforeEach(function() {
        var _this = this;
        setFixtures($("<script>", {
          id: "asset-library-tpl",
          type: "text/template"
        }).text(assetLibraryTpl));
        appendSetFixtures($("<script>", {
          id: "asset-tpl",
          type: "text/template"
        }).text(assetTpl));
        window.analytics = jasmine.createSpyObj('analytics', ['track']);
        window.course_location_analytics = jasmine.createSpy();
        appendSetFixtures(sandbox({
          id: "asset_table_body"
        }));
        this.promptSpies = jasmine.createSpyObj('Prompt.Warning', ["constructor", "show", "hide"]);
        this.promptSpies.constructor.andReturn(this.promptSpies);
        this.promptSpies.show.andReturn(this.promptSpies);
        this.injector = new Squire();
        this.injector.mock("common/js/components/views/feedback_prompt", {
          "Warning": this.promptSpies.constructor
        });
        this.mockAsset1 = {
          display_name: "test asset 1",
          url: 'actual_asset_url_1',
          portable_url: 'portable_url_1',
          date_added: 'date_1',
          thumbnail: null,
          id: 'id_1'
        };
        this.mockAsset2 = {
          display_name: "test asset 2",
          url: 'actual_asset_url_2',
          portable_url: 'portable_url_2',
          date_added: 'date_2',
          thumbnail: null,
          id: 'id_2'
        };
        this.mockAssetsResponse = {
          assets: [this.mockAsset1, this.mockAsset2],
          start: 0,
          end: 1,
          page: 0,
          pageSize: 5,
          totalCount: 2
        };
        runs(function() {
          return _this.injector.require(["js/models/asset", "js/collections/asset", "js/views/assets"], function(AssetModel, AssetCollection, AssetsView) {
            _this.AssetModel = AssetModel;
            _this.collection = new AssetCollection();
            _this.collection.url = "assets-url";
            return _this.createAssetsView = function(test) {
              var requests, view;
              requests = AjaxHelpers.requests(test);
              view = new AssetsView({
                collection: _this.collection,
                el: $('#asset_table_body')
              });
              view.render();
              return {
                view: view,
                requests: requests
              };
            };
          });
        });
        waitsFor((function() {
          return _this.createAssetsView;
        }), "AssetsView Creation function was not initialized", 2000);
        return $.ajax();
      });
      afterEach(function() {
        delete window.analytics;
        delete window.course_location_analytics;
        this.injector.clean();
        return this.injector.remove();
      });
      addMockAsset = function(requests) {
        var model;
        model = new this.AssetModel({
          display_name: "new asset",
          url: 'new_actual_asset_url',
          portable_url: 'portable_url',
          date_added: 'date',
          thumbnail: null,
          id: 'idx'
        });
        this.view.addAsset(model);
        return AjaxHelpers.respondWithJson(requests, {
          assets: [
            this.mockAsset1, this.mockAsset2, {
              display_name: "new asset",
              url: 'new_actual_asset_url',
              portable_url: 'portable_url',
              date_added: 'date',
              thumbnail: null,
              id: 'idx'
            }
          ],
          start: 0,
          end: 2,
          page: 0,
          pageSize: 5,
          totalCount: 3
        });
      };
      describe("Basic", function() {
        var clickEvent, setup;
        setup = function(requests) {
          this.view.pagingView.setPage(0);
          return AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
        };
        $.fn.fileupload = function() {
          return '';
        };
        clickEvent = function(html_selector) {
          return $(html_selector).click();
        };
        it("should show upload modal on clicking upload asset button", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          spyOn(this.view, "showUploadModal");
          setup.call(this, requests);
          expect(this.view.showUploadModal).not.toHaveBeenCalled();
          this.view.showUploadModal(clickEvent(".upload-button"));
          return expect(this.view.showUploadModal).toHaveBeenCalled();
        });
        it("should show file selection menu on choose file button", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          spyOn(this.view, "showFileSelectionMenu");
          setup.call(this, requests);
          expect(this.view.showFileSelectionMenu).not.toHaveBeenCalled();
          this.view.showFileSelectionMenu(clickEvent(".choose-file-button"));
          return expect(this.view.showFileSelectionMenu).toHaveBeenCalled();
        });
        it("should hide upload modal on clicking close button", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          spyOn(this.view, "hideModal");
          setup.call(this, requests);
          expect(this.view.hideModal).not.toHaveBeenCalled();
          this.view.hideModal(clickEvent(".close-button"));
          return expect(this.view.hideModal).toHaveBeenCalled();
        });
        it("should show a status indicator while loading", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          appendSetFixtures('<div class="ui-loading"/>');
          expect($('.ui-loading').is(':visible')).toBe(true);
          setup.call(this, requests);
          return expect($('.ui-loading').is(':visible')).toBe(false);
        });
        it("should hide the status indicator if an error occurs while loading", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          appendSetFixtures('<div class="ui-loading"/>');
          expect($('.ui-loading').is(':visible')).toBe(true);
          this.view.pagingView.setPage(0);
          AjaxHelpers.respondWithError(requests);
          return expect($('.ui-loading').is(':visible')).toBe(false);
        });
        it("should render both assets", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          expect(this.view.$el).toContainText("test asset 1");
          return expect(this.view.$el).toContainText("test asset 2");
        });
        it("should remove the deleted asset from the view", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          setup.call(this, requests);
          this.view.$(".remove-asset-button")[1].click();
          this.promptSpies.constructor.mostRecentCall.args[0].actions.primary.click(this.promptSpies);
          AjaxHelpers.respondWithNoContent(requests);
          expect(this.view.$el).toContainText("test asset 1");
          return expect(this.view.$el).not.toContainText("test asset 2");
        });
        it("does not remove asset if deletion failed", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          this.view.$(".remove-asset-button")[1].click();
          this.promptSpies.constructor.mostRecentCall.args[0].actions.primary.click(this.promptSpies);
          AjaxHelpers.respondWithError(requests);
          expect(this.view.$el).toContainText("test asset 1");
          return expect(this.view.$el).toContainText("test asset 2");
        });
        it("adds an asset if asset does not already exist", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          addMockAsset.call(this, requests);
          expect(this.view.$el).toContainText("new asset");
          return expect(this.collection.models.length).toBe(3);
        });
        return it("does not add an asset if asset already exists", function() {
          var model, requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          spyOn(this.collection, "add").andCallThrough();
          model = this.collection.models[1];
          this.view.addAsset(model);
          return expect(this.collection.add).not.toHaveBeenCalled();
        });
      });
      return describe("Sorting", function() {
        var setup;
        setup = function(requests) {
          this.view.pagingView.setPage(0);
          return AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
        };
        it("should have the correct default sort order", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          expect(this.view.pagingView.sortDisplayName()).toBe("Date Added");
          return expect(this.view.collection.sortDirection).toBe("desc");
        });
        it("should toggle the sort order when clicking on the currently sorted column", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          expect(this.view.pagingView.sortDisplayName()).toBe("Date Added");
          expect(this.view.collection.sortDirection).toBe("desc");
          this.view.$("#js-asset-date-col").click();
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          expect(this.view.pagingView.sortDisplayName()).toBe("Date Added");
          expect(this.view.collection.sortDirection).toBe("asc");
          this.view.$("#js-asset-date-col").click();
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          expect(this.view.pagingView.sortDisplayName()).toBe("Date Added");
          return expect(this.view.collection.sortDirection).toBe("desc");
        });
        it("should switch the sort order when clicking on a different column", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          this.view.$("#js-asset-name-col").click();
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          expect(this.view.pagingView.sortDisplayName()).toBe("Name");
          expect(this.view.collection.sortDirection).toBe("asc");
          this.view.$("#js-asset-name-col").click();
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          expect(this.view.pagingView.sortDisplayName()).toBe("Name");
          return expect(this.view.collection.sortDirection).toBe("desc");
        });
        return it("should switch sort to most recent date added when a new asset is added", function() {
          var requests, _ref;
          _ref = this.createAssetsView(this), this.view = _ref.view, requests = _ref.requests;
          setup.call(this, requests);
          this.view.$("#js-asset-name-col").click();
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          addMockAsset.call(this, requests);
          AjaxHelpers.respondWithJson(requests, this.mockAssetsResponse);
          expect(this.view.pagingView.sortDisplayName()).toBe("Date Added");
          return expect(this.view.collection.sortDirection).toBe("desc");
        });
      });
    });
  });

}).call(this);
