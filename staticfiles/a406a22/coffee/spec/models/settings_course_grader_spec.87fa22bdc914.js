// Generated by CoffeeScript 1.6.1
(function() {

  define(["js/models/settings/course_grader"], function(CourseGrader) {
    return describe("CourseGraderModel", function() {
      return describe("parseWeight", function() {
        it("converts a float to an integer", function() {
          var model;
          model = new CourseGrader({
            weight: 7.0001,
            min_count: 3.67,
            drop_count: 1.88
          }, {
            parse: true
          });
          expect(model.get('weight')).toBe(7);
          expect(model.get('min_count')).toBe(4);
          return expect(model.get('drop_count')).toBe(2);
        });
        it("converts float value of weight to an integer with rounding", function() {
          var model;
          model = new CourseGrader({
            weight: 28.999999999999996
          }, {
            parse: true
          });
          return expect(model.get('weight')).toBe(29);
        });
        it("converts a string to an integer", function() {
          var model;
          model = new CourseGrader({
            weight: '7.0001',
            min_count: '3.67',
            drop_count: '1.88'
          }, {
            parse: true
          });
          expect(model.get('weight')).toBe(7);
          expect(model.get('min_count')).toBe(4);
          return expect(model.get('drop_count')).toBe(2);
        });
        it("does a no-op for integers", function() {
          var model;
          model = new CourseGrader({
            weight: 7,
            min_count: 3,
            drop_count: 1
          }, {
            parse: true
          });
          expect(model.get('weight')).toBe(7);
          expect(model.get('min_count')).toBe(3);
          return expect(model.get('drop_count')).toBe(1);
        });
        return it("gives validation error if min_count is less than 1 or drop_count is NaN", function() {
          var errors, model;
          model = new CourseGrader();
          errors = model.validate({
            min_count: 0,
            drop_count: ''
          }, {
            validate: true
          });
          expect(errors.min_count).toBe('Please enter an integer greater than 0.');
          expect(errors.drop_count).toBe('Please enter non-negative integer.');
          errors = model.validate({
            min_count: -12,
            drop_count: -1
          }, {
            validate: true
          });
          expect(errors.min_count).toBe('Please enter an integer greater than 0.');
          expect(errors.drop_count).toBe('Please enter non-negative integer.');
          errors = model.validate({
            min_count: 12.2,
            drop_count: 1.5
          }, {
            validate: true
          });
          expect(errors.min_count).toBe('Please enter an integer greater than 0.');
          return expect(errors.drop_count).toBe('Please enter non-negative integer.');
        });
      });
    });
  });

}).call(this);
